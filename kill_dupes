#!/usr/bin/env python3
import sys

from gmusicapi import Mobileclient

###### mike troubleshooting
from gmusicapi.utils import utils
print(utils.log_filepath)

#Mobileclient.__init__(debug_logging=True)

####

try:
    import credentials
    # credentials.py is in .gitignore and can be shared with other scripts
    username = credentials.username
    password = credentials.password
except ImportError:
    username = 'username'
    password = 'password'

try:
    # optionally hardcode id to workaround https://github.com/simon-weber/gmusicapi/issues/408
    android_id = credentials.android_id
except (NameError, AttributeError):
    android_id = Mobileclient.FROM_MAC_ADDRESS


def map_track_duplication(tracks):
    album_track_duplicate_map = {}
    for track in tracks:
        albumNorm = track['album'].lower()
        titleNorm = track['title'].lower()
        try:
            trackNumberNorm = track['trackNumber']
        except:
            trackNumberNorm = 0
        try:
            discNumberNorm = track['discNumber']
        except:
            discNumberNorm = 0
        if albumNorm not in album_track_duplicate_map:
            album_track_duplicate_map.update({albumNorm: {}})
        if titleNorm not in album_track_duplicate_map[albumNorm]:
            album_track_duplicate_map[albumNorm].update({titleNorm: {}})
        if trackNumberNorm not in album_track_duplicate_map[albumNorm][titleNorm]:
            album_track_duplicate_map[albumNorm][titleNorm].update({trackNumberNorm: {}})
        if discNumberNorm in album_track_duplicate_map[albumNorm][titleNorm][trackNumberNorm]:
            album_track_duplicate_map[albumNorm][titleNorm][trackNumberNorm][discNumberNorm] += 1
        else:
            album_track_duplicate_map[albumNorm][titleNorm][trackNumberNorm][discNumberNorm] = 1
    return album_track_duplicate_map


def sort_tracks_by_album(tracks):
    tracks_by_album = {}
    for track in tracks:
        albumNorm = track['album'].lower()
        if albumNorm not in tracks_by_album:
            tracks_by_album[albumNorm] = []
        tracks_by_album[albumNorm].append(track)
    return tracks_by_album


def get_duplicate_tracks(all_tracks_by_album, album_track_duplicate_map):
    duplicate_tracks = []
    for album_title in album_track_duplicate_map:
        for track_title in album_track_duplicate_map[album_title]:
            for track_number in album_track_duplicate_map[album_title][track_title]:
                for disc_number in album_track_duplicate_map[album_title][track_title][track_number]:
                    duplicates = album_track_duplicate_map[album_title][track_title][track_number][disc_number] - 1 #As one is always added
                    if duplicates > 0:
                        for album in all_tracks_by_album:
                            if album_title == album.lower():
                                for track in all_tracks_by_album[album]:
                                    titleNorm = track['title'].lower()
                                    if titleNorm == track_title:
                                        try:
                                            trackNumberNorm = track['trackNumber']
                                        except:    
                                            trackNumberNorm = 0
                                        if trackNumberNorm == track_number:
                                            try:
                                                discNumberNorm = track['discNumber']
                                            except:
                                                discNumberNorm = 0

                                            if discNumberNorm == disc_number and duplicates > 0:
                                                duplicate_tracks.append(track)
                                                #PR Encode output in utf-8 to avoid errors when printing special characters not supported by default codeset
                                                print(("Queuing for removal: '" + track['title'] + "' from album '" + track['album'] + "' by '" + track['artist']).encode('utf-8'))
                                                all_tracks.remove(track)
                                                duplicates -= 1
    return duplicate_tracks


def query_yes_no(question, default="yes"):
    """Ask a yes/no question via input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is one of "yes" or "no".
    """
    valid = {"yes":True,   "y":True,  "ye":True,
             "no":False,     "n":False}
    if default == None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        if sys.version_info[0] < 3:
            choice = raw_input().lower()
        else:
            choice = input().lower()
            
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "\
                             "(or 'y' or 'n').\n")


def get_track_ids(tracks):
    track_ids = []
    for track in tracks:
        track_ids.append(track['id'])
    return track_ids

api = Mobileclient()
logged_in = api.login(username, password, android_id)

if logged_in:
    print("Successfully logged in. Beginning duplicate detection process.")
    all_tracks = api.get_all_songs()
    album_track_duplicate_map = map_track_duplication(all_tracks)
    all_tracks_by_album = sort_tracks_by_album(all_tracks)
    duplicate_tracks = get_duplicate_tracks(all_tracks_by_album, album_track_duplicate_map)
    duplicate_track_ids = get_track_ids(duplicate_tracks)
    if len(duplicate_track_ids) > 0:
        if query_yes_no("Found " + str(len(duplicate_track_ids)) + " duplicate tracks. Delete duplicates?", "no"):
            deleted_track_ids = []
            for track in duplicate_track_ids:
                deleted_track_ids += api.delete_songs(track)
            print("Successfully deleted " + str(len(deleted_track_ids)) + " of " + str(len(duplicate_track_ids)) + " queued songs for removal.")
    else:
        print("I didn't find any duplicate tracks.")
    print("Thank you!")
else:
    print("I guess login failed?")
